##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / c 1.1.0-incubating (LOCAL-0)
//   Fri Aug 28 15:58:20 CEST 2009
// This file is automatically created and should not be edited!
#set($i = $intf.name().name().toLowerCase()) 
/*
 * $helper.getMainFileNameI($intf, $mc)
 */
 
\#include "$helper.getMainFileNameH($intf, $mc)"
\#include "etch_objecttypes.h"
\#include "etch_runtime.h"
\#include "etch_arrayval.h"
\#include "etch_nativearray.h"
\#include "etch_binary_tdo.h"
\#include "etch_general.h"


#if($helper.isServer($mc))
/**
 * new_$helper.getBaseName($intf, $suffix)
 * create an individual client's $helper.getBaseName($intf, $suffix) implementation.
 * this is java binding's new$intf.name().name().toLowerCase()Server().
 * this is called back from helper.new_helper_accepted_server() (java's newServer).
 * @param p parameter bundle. caller retains. 
 * @return the i_$helper.getBaseName($intf, $suffix), whose thisx is the $intf.name().name().toLowerCase()_server_impl.
 */
static void* ${i}_server_create(void* factoryData, void* sessionData)
{
    etch_session* session = (etch_session*)sessionData;
    $helper.getRemoteName($intf, $helper.getRemoteDirectionName($mc))* client  = ($helper.getRemoteName($intf, $helper.getRemoteDirectionName($mc))*) session->client;

    $helper.getImplName($intf, $suffix)* newserver = new_$helper.getImplName($intf, $suffix)(client);

    return newserver->$helper.getBaseName($intf, $suffix)_base;
}

etch_status_t ${i}_listener_start(i_sessionlistener** pplistener, wchar_t* uri, int waitupms)
{
    etch_status_t etch_status = ETCH_SUCCESS;
    
    etch_status = ${i}_helper_listener_create(pplistener, uri, NULL, ${i}_server_create);
    if(etch_status == ETCH_SUCCESS) 
    {
        etch_status = ${i}_helper_listener_start_wait(*pplistener, waitupms);
    }

    return etch_status;
}

etch_status_t ${i}_listener_stop(i_sessionlistener* plistener, int waitupms)
{
    etch_status_t etch_status = ETCH_SUCCESS;
    
    etch_status = ${i}_helper_listener_stop_wait(plistener, waitupms);
    if(etch_status == ETCH_SUCCESS) 
    {
        ${i}_helper_listener_destroy(plistener);
    }

    return etch_status;
}

#end
#if($helper.isClient($mc))
/**
 * new_$helper.getBaseName($intf, $suffix)().
 * callback constructor for client implementation object.
 * this callback address is passed to start_$helper.getBaseName($intf, $suffix)() in [main].
 * @param server the remote server. 
 * @remarks this callback must be supplied, i.e. its functionality cannot be 
 * defaulted, since the client implementation constructor new_$helper.getImplName($intf, $suffix)()
 * is not known to start_$helper.getBaseName($intf, $suffix)().
 */
static i_$helper.getBaseName($intf, $suffix)* ${i}_client_create(void* factory_thisx, $helper.getRemoteName($intf, $helper.getRemoteDirectionName($mc))* server)
{
    $helper.getImplName($intf, $suffix)* client = new_$helper.getImplName($intf, $suffix)(server);
    return client? client->$helper.getBaseName($intf, $suffix)_base:NULL;
}
#end

#if($helper.isServer($mc))
#ifndef NO_ETCH_SERVER_MAIN
#end

/**
 * main()
 */
int main(int argc, char* argv[])
{
#if($helper.isServer($mc))
	etch_status_t etch_status = ETCH_SUCCESS;
    i_sessionlistener* listener = NULL;
    int waitupms = 4000;
    
    wchar_t* uri = L"tcp://0.0.0.0:4001";

    etch_config_t* config = NULL;
    etch_config_create(&config);
	
    etch_status = etch_runtime_initialize(config);
    if(etch_status != ETCH_SUCCESS) {
        // error
        return 1;
    }

    etch_status = ${i}_listener_start(&listener, uri, waitupms);
    if(etch_status != ETCH_SUCCESS) {
        // error
    }

    // wait for keypress
    waitkey();

    etch_status = ${i}_listener_stop(listener, waitupms);
    if(etch_status != ETCH_SUCCESS) {
        // error
    }

    etch_status = etch_runtime_shutdown();
    if(etch_status != ETCH_SUCCESS) {
        // error
        return 1;
    }
	etch_config_destroy(config);
    // wait for keypress
    waitkey();
	
    return 0;
#end
#if($helper.isClient($mc))
    etch_status_t etch_status    = ETCH_SUCCESS;
    ${i}_remote_server* remote = NULL;
    int waitupms = 4000;
    
    wchar_t* uri = L"tcp://127.0.0.1:4004";	
	
       etch_config_t* config = NULL;
    etch_config_create(&config);
    // set properties or read file

    etch_status = etch_runtime_initialize(config);
    if(etch_status != ETCH_SUCCESS) {
        // error
        return 1;
    }

    etch_status = ${i}_helper_remote_server_create(&remote, uri, NULL, ${i}_client_create);
    if(etch_status != ETCH_SUCCESS) {
        // error
    }

    etch_status = ${i}_helper_remote_server_start_wait(remote, waitupms);
    if(etch_status != ETCH_SUCCESS) {
        // error
    }
	
	//add your implementation here
    
    // wait until key press
    waitkey();

    etch_status = ${i}_helper_remote_server_stop_wait(remote, waitupms);
    if(etch_status != ETCH_SUCCESS) {
        // error
    }

    etch_status = ${i}_helper_remote_server_destroy(remote);
    if(etch_status != ETCH_SUCCESS) {
        // error
    }
	etch_config_destroy(config);
	return 0;
#end
}

#if($helper.isServer($mc))
#endif /* NO_ETCH_SERVER_MAIN */
#end
