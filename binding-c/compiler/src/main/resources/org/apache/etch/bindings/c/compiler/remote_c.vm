##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

\#include "$helper.getRemoteFileNameH($intf, '')"
\#include "etch_url.h"  
\#include "etch_objecttypes.h"
\#include "etch_general.h"

unsigned short CLASSID_$helper.getRemoteName($intf, "").toUpperCase();

int destroy_$helper.getRemoteName($intf, '') (void*);


/* - - - - - - - - - - - - - -  
 * constructors
 * - - - - - - - - - - - - - -  
 */

/**
 * new_$helper.getRemoteName($intf, '')
 * @param ids delivery service -- caller retains
 * @param vf $intf.name().name().toLowerCase() value factory - caller retains 
 * @param i$intf.name().name().toLowerCase() optional $intf.name().name().toLowerCase() service interface -- caller retains
 */
$helper.getRemoteName($intf, '')* new_$helper.getRemoteName($intf, '') (void* thisx, 
    i_delivery_service* ids, etch_value_factory* vf, i_$helper.getIntfName($intf)* iservice)
{
    $helper.getRemoteName($intf, '')* remote = ($helper.getRemoteName($intf, '')*) new_object (sizeof($helper.getRemoteName($intf, '')), 
        ETCHTYPEB_REMOTE, get_dynamic_classid_unique(&CLASSID_$helper.getRemoteName($intf, '').toUpperCase()));

    ((etch_object*)remote)->destroy = destroy_$helper.getRemoteName($intf, '');

    /* $intf.name().name().toLowerCase()_remote instance data and methods */
    remote->dsvc = ids; 
    remote->vf   = vf;
    remote->start_waitup  = etchremote_start_waitup;
    remote->stop_waitdown = etchremote_stop_waitdown;

    /* transport methods */
    remote->transport_control = etchremote_transport_control;
    remote->transport_notify  = etchremote_transport_notify;
    remote->transport_query   = etchremote_transport_query;

    /* remote base */
    remote->new_message = etchremote_new_message;
    remote->send        = etchremote_send;
    remote->sendex      = etchremote_sendex;
    remote->begin_call  = etchremote_begincall;
    remote->end_call    = etchremote_endcall;

    /* $helper.getIntfName($intf) service */
    if (iservice)
        remote->i$helper.getIntfName($intf) = iservice;
    else
    {   remote->i$helper.getIntfName($intf) = new_$intf.name().name().toLowerCase()_service_interface();
        remote->is_service_interface_owned = TRUE;
    }

    return remote;
}
/**
 * destroy_$helper.getRemoteName($intf, '')()
 * $helper.getRemoteName($intf, '') destructor.
 */
int destroy_$helper.getRemoteName($intf, '') (void* data)
{
    $helper.getRemoteName($intf, '')* thisx = ($helper.getRemoteName($intf, '')*)data;
    if (NULL == thisx) return -1;

    if (!is_etchobj_static_content(thisx))
    {
        if (thisx->is_service_interface_owned && thisx->i$helper.getIntfName($intf))
            etch_object_destroy(thisx->i$helper.getIntfName($intf));
    }

    return destroy_objectex((etch_object*)thisx);
}


