##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

/*
 * $helper.getBaseFileNameH( $intf, $suffix )
 * $helper.getServiceName( $intf ) client interface.
 * combines java bindings's $intf.name()Server and Base$intf.name()Server
 */

#ifndef $helper.getBaseName( $intf, $suffix ).toUpperCase()_H
#define $helper.getBaseName( $intf, $suffix ).toUpperCase()_H

\#include "$helper.getIntfFileNameH( $intf )"
\#include "etch_sessionint.h"

#ifdef __cplusplus
extern "C" {
#endif

extern unsigned short CLASSID_$helper.getBaseName( $intf, $suffix ).toUpperCase()_BASE;
#if($helper.isServer($mc))
##generate typedefs for the server signal methods
#set($whoType = "etch_who*")
#set($whoName = "sender")
#foreach( $n in $intf.iterator() )
#if ($n.isMessage() && $n.isMsgDir($mc) && $n.hasSignal() && $n.isMsgDirServer())
#set ($methodReturn = "$helper.getPointerTypeName( $n.type() )")
#set ($methodName = "$helper.getServiceName($intf)_ex_$n.name()")
#set ($methodParams = "void* thisx")
#foreach( $p in $n.iterator() )
#set ($methodParams = "$methodParams, $helper.getTypeName( $p.type() ) $p.name()")
#end
#set ($methodParams = "$methodParams, $whoType $whoName")
typedef $methodReturn (*$methodName)($methodParams);
#end
#end
#end

//typedef struct $helper.getImplName( $intf, $suffix ) $helper.getImplName( $intf, $suffix );

/**
 * i_$helper.getBaseName( $intf, $suffix )
 * $helper.getServiceName( $intf ) $suffix base interface
 */
typedef struct i_$helper.getBaseName( $intf, $suffix )
{
    etch_object object;

	struct $helper.getImplName( $intf, $suffix )* thisx;
    i_$helper.getServiceName( $intf )*  i$helper.getServiceName( $intf );
    
#if ($helper.isServer($mc))
    int session_id;
    unsigned char is_service_interface_owned;
    unsigned char unused[3];
#end

    /* - - - - - - - - - - -
     * objsession
     * - - - - - - - - - - -
     */
    i_objsession* iobjsession;
    etch_session_control _session_control;
    etch_session_notify  _session_notify;
    etch_session_query   _session_query;

    /* - - - - - - - - - - -
     * service virtuals
     * - - - - - - - - - - -
     */
    etch_hashtable *virtuals;

     /* - - - - - - - - - - -
     * private instance data
     * - - - - - - - - - - -
     */
    int server_id;

} i_$helper.getBaseName($intf, $suffix);

#if($helper.isServer($mc))
i_$helper.getBaseName( $intf, $suffix )* new_$helper.getBaseName( $intf, $suffix )_base (void* implobj, i_$helper.getIntfName( $intf )*);
i_$helper.getBaseName( $intf, $suffix )* new_$helper.getRemoteName( $intf, $suffix )_base (void* implobj, i_$helper.getIntfName( $intf )*);
int destroy_$helper.getBaseName( $intf, $suffix )_base (void*);

##generate method prototypes for the default server signal handlers
#foreach( $n in $intf.iterator() )
#if ($n.isMessage() && $n.isMsgDir($mc) && $n.hasSignal() && $n.isMsgDirServer())
#set ($methodReturn = "$helper.getPointerTypeName( $n.type() )")
#set ($methodName = "$helper.getServiceName($intf)_ex_def_$n.name()")
#set ($methodParams = "void* thisx")
#foreach( $p in $n.iterator() )
#set ($methodParams = "$methodParams, $helper.getTypeName( $p.type() ) $p.name()")
#end
#set ($methodParams = "$methodParams, $whoType $whoName")
$methodReturn $methodName($methodParams);
#end
#end
#end
#if($helper.isClient( $mc ))
i_$helper.getBaseName($intf, $suffix)* new_$helper.getBaseName($intf, $suffix)_base();
#end


#ifdef __cplusplus
} //extern "C"
#endif

#endif /* $helper.getBaseName( $intf, $suffix ).toUpperCase()_H */
