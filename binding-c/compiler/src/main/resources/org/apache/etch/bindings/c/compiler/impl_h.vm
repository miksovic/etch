##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / c 1.1.0-incubating (LOCAL-0)
//   Fri Aug 28 15:58:20 CEST 2009
// This file is automatically created and should not be edited!

#ifndef $helper.getImplName($intf, $suffix).toUpperCase()_H
#define $helper.getImplName($intf, $suffix).toUpperCase()_H

\#include "$helper.getBaseFileNameH($intf, $suffix)"
\#include "etch_transport.h"

#ifdef __cplusplus
extern "C" {
#endif

extern unsigned short CLASSID_$helper.getImplName($intf, $suffix).toUpperCase();

//typedef struct $helper.getRemoteName($intf, $helper.getDirectionName($helper.getRemoteDirection($mc))) $helper.getRemoteName($intf, $helper.getDirectionName($helper.getRemoteDirection($mc)));

/**
 * $helper.getImplName($intf, $suffix)
 * your custom implementation of $helper.getBaseName($intf, $suffix). add methods here 
 * to provide implementations of messages from the client, if any.
 */
typedef struct $helper.getImplName($intf, $suffix)
{
    etch_object object;  

    i_$helper.getBaseName($intf, $suffix)* $helper.getBaseName($intf, $suffix)_base; /* owned */
    i_$intf.name().name().toLowerCase()* i$intf.name().name().toLowerCase(); /* not owned */
    struct $helper.getRemoteName($intf, $helper.getDirectionName($helper.getRemoteDirection($mc)))* $helper.getDirectionName($helper.getRemoteDirection($mc)); /* not owned */

    int (*destroyex) (void*);  /* user memory destructor */

    /* - - - - - - - - - - - -
     * objsession
     * - - - - - - - - - - - -
     */
    i_objsession* iobjsession;  /* owned by base */
    /* note that iobjsession->thisx is set to this $helper.getImplName($intf, $suffix)* */
    etch_session_control _session_control;
    etch_session_notify  _session_notify;
    etch_session_query   _session_query;

    /* - - - - - - - - - - - -
     * base service virtuals
     * - - - - - - - - - - - -
     */
## generate service virtuals
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden())
    $helper.getServiceName($intf).toLowerCase()_$n.name() $n.name();
#end
#end
#end

    void* context;


} $helper.getImplName($intf, $suffix);

/* constructor */
$helper.getImplName($intf, $suffix)* new_$helper.getImplName($intf, $suffix) (struct $helper.getRemoteName($intf, $helper.getDirectionName($helper.getRemoteDirection($mc)))*);

#ifdef __cplusplus
} //extern "C"
#endif

#endif /* $helper.getImplName($intf, $suffix).toUpperCase()_H */
