##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / c 1.1.0-incubating (LOCAL-0)
//   Fri Aug 28 15:58:20 CEST 2009
// This file is automatically created and should not be edited!

#set($i = $intf.name().name().toLowerCase()) 

#ifndef $i.toUpperCase()_HELPER_H
#define $i.toUpperCase()_HELPER_H

\#include "etch.h"
\#include "etch_errno.h"
\#include "etch_transport.h"
#if($helper.isClient($mc))
\#include "${i}_remote_server.h"
#end

#ifdef __cplusplus
extern "C" {
#endif

#if($helper.isClient($mc))
etch_status_t $helper.getServiceName($intf)_helper_remote_server_create($helper.getServiceName($intf)_remote_server** remote_server, wchar_t* uri, void* factory_thisx, main_client_create_func client_create);
etch_status_t $helper.getServiceName($intf)_helper_remote_server_start_wait($helper.getServiceName($intf)_remote_server* remote_server, const int waitms);
etch_status_t $helper.getServiceName($intf)_helper_remote_server_stop_wait($helper.getServiceName($intf)_remote_server* remote_server, const int waitms);
etch_status_t $helper.getServiceName($intf)_helper_remote_server_destroy($helper.getServiceName($intf)_remote_server* remote_server);
#end

#if($helper.isServer($mc))
etch_status_t $helper.getServiceName($intf)_helper_listener_create(i_sessionlistener** listener, wchar_t* uri, void* factory_thisx, main_server_create_func);
etch_status_t $helper.getServiceName($intf)_helper_listener_start_wait(i_sessionlistener* listener, const int waitms);
etch_status_t $helper.getServiceName($intf)_helper_listener_stop_wait(i_sessionlistener* listener, const int waitms);
etch_status_t $helper.getServiceName($intf)_helper_listener_destroy(i_sessionlistener* listener);
#end

#ifdef __cplusplus
} //extern "C"
#endif

#endif /* $i.toUpperCase()_HELPER_H */

