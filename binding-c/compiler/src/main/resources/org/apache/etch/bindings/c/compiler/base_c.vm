##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

#set($hasSignals = false)
#if ($intf.signals( false ).hasNext())
#set($hasSignals = true)
#end
#if ($hasSignals && $helper.isServer($mc))
\#include "$helper.getImplFileNameH($intf, $suffix)"
\#include "$helper.getRemoteFileNameH($intf, $helper.getRemoteDirectionName($mc))"
#else
\#include "$helper.getBaseFileNameH($intf, $suffix)"
#end
\#include "etch_objecttypes.h"
\#include "etch_general.h"
\#include "etch_url.h"  
#foreach($serviceName in $helper.getUsedServiceNames($intf))	
\#include "${serviceName.toLowerCase()}_interface.h"
#end

unsigned short CLASSID_$helper.getBaseName( $intf, $suffix ).toUpperCase()_BASE;
	
#if ($helper.isServer($mc))
int destroy_$helper.getBaseName($intf, $suffix)_via_base(void*);
#end
#if ($helper.isClient($mc))
int destroy_$helper.getBaseName($intf, $suffix)_base(void*);
#end

#if ($helper.isServer($mc))
static int $helper.getBaseName( $intf, $suffix )_id_farm;
#end

/* - - - - - - - - - - - - - -  
 * constructors
 * - - - - - - - - - - - - - -  
 */
## server base
#if ($helper.isServer($mc))
/**
 * new_$helper.getBaseName( $intf, $suffix )_base()
 * @param implobj not interpreted
 * @param psi a $helper.getIntfName( $intf ) service interface. if supplied, caller retains,
 * otherwise a service interface is instantiated and owned here. 
 */
i_$helper.getBaseName( $intf, $suffix )* new_$helper.getBaseName( $intf, $suffix )_base(void* implobj, i_$helper.getIntfName( $intf )* psi)
{
    i_$helper.getBaseName( $intf, $suffix )* ips = (i_$helper.getBaseName( $intf, $suffix )*) new_object (sizeof(i_$helper.getBaseName( $intf, $suffix )), 
        ETCHTYPEB_EXESERVERBASE, get_dynamic_classid_unique(&CLASSID_$helper.getBaseName( $intf, $suffix ).toUpperCase()_BASE));

    /* the server impl is destroyed via this base object. the virtual destructor we assign
     * here will call the impl object's virtual destructor, which will directly call a 
     * non-virtual destructor for the base object. 
     */

    ((etch_object*)ips)->destroy = destroy_$helper.getBaseName( $intf, $suffix )_via_base;
    
    ips->thisx   = implobj; /* null passed thru from client main */
    
    if (psi)
        ips->i$helper.getIntfName( $intf ) = psi;
    else
    {   ips->i$helper.getIntfName( $intf ) = new_$helper.getIntfName( $intf )_service_interface();
        ips->is_service_interface_owned = TRUE;
    }

    ips->virtuals = new_hashtable(ETCH_DEFAULT_HASHTABLE_SIZE);
    ips->virtuals->is_readonly_keys = FALSE;

    ips->iobjsession = new_default_objsession_interface (ips);
    ips->_session_control = ips->iobjsession->_session_control; 
    ips->_session_notify  = ips->iobjsession->_session_notify; 
    ips->_session_query   = ips->iobjsession->_session_query; 

    ips->server_id = ++$helper.getIntfName( $intf )_server_id_farm;

    return ips;
}

/**
 * new_$helper.getRemoteName( $intf, $suffix )_base()  
 * constructor for server base when host is a remote server.
 * the server base destructor in this case destroys only itself.   
 * @param psi a $helper.getIntfName( $intf ) service interface, if supplied, caller retains.
 * may be null.
 */
i_$helper.getBaseName( $intf, $suffix )* new_$helper.getRemoteName( $intf, $suffix )_base (void* implobj, i_$helper.getIntfName( $intf )* psi)
{
    i_$helper.getBaseName( $intf, $suffix )* ips = new_$helper.getBaseName( $intf, $suffix )_base (implobj, psi);
    ((etch_object*)ips)->destroy = destroy_$helper.getBaseName( $intf, $suffix )_base;
    return ips;
}

/**
 * destroy_$helper.getBaseName($intf, $suffix)_base()
 * i_$helper.getBaseName($intf, $suffix) destructor.
 */
int destroy_$helper.getBaseName( $intf, $suffix )_base (void* data)
{

    i_$helper.getBaseName( $intf, $suffix )* ips = (i_$helper.getBaseName( $intf, $suffix )*)data;
    if (NULL == ips) return -1;

    if (!is_etchobj_static_content(ips))
    {    
        if (ips->is_service_interface_owned){
            //ETCHOBJ_DESTROY(ips->i$helper.getIntfName( $intf ));
			if(ips->i$helper.getIntfName( $intf )){
				etch_object_destroy(ips->i$helper.getIntfName( $intf ));
			}
			ips->i$helper.getIntfName( $intf ) = NULL;
			
		}

        etch_free(ips->iobjsession);
    }
            
    destroy_hashtable(ips->virtuals, TRUE, FALSE);	
    return destroy_objectex((etch_object*)ips);
}


/**
 * destroy_$helper.getBaseName( $intf, $suffix )_via_base()
 * destructor for $helper.getBaseName( $intf, $suffix )_impl via i_$helper.getBaseName( $intf, $suffix ).
 */
int destroy_$helper.getBaseName( $intf, $suffix )_via_base (void* data)
{
    i_$helper.getBaseName( $intf, $suffix )* ips = (i_$helper.getBaseName( $intf, $suffix )*)data;
    if (NULL == ips) return -1;  

    if (!is_etchobj_static_content(ips))
    {    
        /* serverimpl dtor will call base dtor (destroy_$helper.getBaseName( $intf, $suffix )_base) */
        etch_object* serverimpl = (etch_object*) ips->thisx;
        ETCH_ASSERT(is_etch_serverimpl(serverimpl));
        //ETCHOBJ_DESTROY(serverimpl);
		if(serverimpl){
			etch_object_destroy(serverimpl);
		}
		serverimpl = NULL;
    }

    return 0;
}


/* - - - - - - - - - - - - - -  
 * service method stubs
 * - - - - - - - - - - - - - -  
 */

#set($whoType = "etch_who*")
#set($whoName = "sender")
#foreach( $n in $intf.iterator() )
#if ($n.isMessage() && $n.hasSignal() && $n.isMsgDirServer())
#set ($methodReturn = "$helper.getPointerTypeName( $n.type() )")
#set ($methodName = "$helper.getServiceName($intf)_ex_def_$n.name()")
#set ($methodParams = "void* thisx")
#foreach( $p in $n.iterator() )
#set ($methodParams = "$methodParams, $helper.getTypeName( $p.type() ) $p.name()")
#end
#set ($methodParams = "$methodParams, $whoType $whoName")
$methodReturn $methodName($methodParams)
{
	$helper.getImplName($intf, $suffix)* server = ($helper.getImplName($intf, $suffix)*)thisx;
	etch_exception* exception = NULL;
	int errorcode;

#foreach( $p in $n.iterator())
#if($p.type().isBuiltin())
	etch_object_destroy($p.name());
	$p.name() = NULL;
#else
   etch_object_destroy($p.name());
#end
#end
#set ($subscriptionMethodPrefix = 'remove')
#if ($n.isSignalSubscribeMessage())
#set ($subscriptionMethodPrefix = 'add')
#end

#set ($clientVar = "server->$helper.getDirectionName($helper.getRemoteDirection($mc))")
#set ($subscriptionMethod = "${subscriptionMethodPrefix}_$n.getMessageSignal().getSignalName()_subscriber")
	errorcode = ${clientVar}->$subscriptionMethod($clientVar, $whoName);
	if (errorcode != ETCH_SUCCESS) {
		exception = new_etch_exception_from_errorcode(errorcode);
		ETCH_ASSERT(exception != NULL);
	}

	if (errorcode == ETCH_ENOMEM)
		etch_exception_set_message(exception, new_stringw(L"out of memory"));
	else if (errorcode == ETCH_ERROR)
		etch_exception_set_message(exception, new_stringw(L"unable to $subscriptionMethodPrefix subscriber"));

	return exception;
}

#end
#end
#end
## client base
#if ($helper.isClient($mc))
/**
 * new_$helper.getBaseName($intf, $suffix)_base()
 * @param iservice service interface -- caller retains   
 */
i_$helper.getBaseName($intf, $suffix)* new_$helper.getBaseName($intf, $suffix)_base(struct $helper.getImplName($intf, $suffix)* implobj)
{
    i_$helper.getBaseName( $intf, $suffix )* ipc = (i_$helper.getBaseName( $intf, $suffix )*) new_object (sizeof(i_$helper.getBaseName( $intf, $suffix )), 
        ETCHTYPEB_EXECLIENTBASE, get_dynamic_classid_unique(&CLASSID_$helper.getBaseName( $intf, $suffix ).toUpperCase()_BASE));

    ipc->thisx   = implobj;  /* $helper.getImplName( $intf, $suffix ) on client, null on server */
    ((etch_object*)ipc)->destroy = destroy_$helper.getBaseName( $intf, $suffix )_base;

    ipc->i$helper.getIntfName( $intf ) = new_$helper.getIntfName( $intf )_service_interface();

    ipc->virtuals = new_hashtable(ETCH_DEFAULT_HASHTABLE_SIZE);
    ipc->virtuals->is_readonly_keys = FALSE; 
 
    return ipc;
}

/**
 * destroy_$helper.getBaseName( $intf, $suffix )_base()
 * i_$helper.getBaseName( $intf, $suffix ) destructor.
 */
int destroy_$helper.getBaseName( $intf, $suffix )_base (void* data)
{
    i_$helper.getBaseName( $intf, $suffix )* ipc = (i_$helper.getBaseName( $intf, $suffix )*)data;
    if (NULL == ipc) return -1;  

    if (!is_etchobj_static_content(ipc))
    {    
        if (ipc->thisx)  /* thisx is null on server (i.e. this is a remote client) */
        {   /* destroy the $helper.getBaseName( $intf, $suffix )_impl object */
            ETCH_ASSERT(is_etch_client_impl((etch_object*)ipc->thisx));
			if(((etch_object*)ipc->thisx)){
				etch_object_destroy(((etch_object*)ipc->thisx));
			}
			ipc->thisx = NULL;
        }

		if(ipc->i$helper.getIntfName( $intf )){
			etch_object_destroy(ipc->i$helper.getIntfName( $intf ));
		}
		ipc->i$helper.getIntfName( $intf ) = NULL;
        etch_free(ipc->iobjsession);
    }
            
    destroy_hashtable(ipc->virtuals, TRUE, FALSE);
    return destroy_objectex((etch_object*)ipc);
}

#end
