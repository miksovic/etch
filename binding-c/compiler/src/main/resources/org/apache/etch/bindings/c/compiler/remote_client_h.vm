##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

/*
 * $helper.getRemoteFileNameH($intf, $suffix) 
 */

#ifndef $helper.getRemoteName($intf, $suffix).toUpperCase()_H
#define $helper.getRemoteName($intf, $suffix).toUpperCase()_H

\#include "$helper.getRemoteFileNameH($intf, "")"
\#include "$helper.getBaseFileNameH($intf, $suffix)"
\#include "etch_transport.h"

#ifdef __cplusplus
extern "C" {
#endif

extern unsigned short CLASSID_$helper.getRemoteName($intf, $suffix).toUpperCase();

#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden())
#if ($n.isMsgDir($mc) || $n.isMsgDirBoth())
#if (!$n.isOneway())
#set ($sb = "i_mailbox* $helper.getRemoteName($intf, '')_begin_client_$n.name()(void* thisAsVoid")
#else
#set ($sb = "$helper.getPointerTypeName($n.type()) $helper.getRemoteName($intf, '')_begin_client_$n.name()(void* thisAsVoid")
#end
#foreach( $p in $n.iterator() )
#set ( $sb = "$sb, $helper.getTypeName($p.type()) $p.name()")
#end
#set ($sb = "$sb, etch_who* whoto)")
$sb;
$helper.getPointerTypeName($n.type()) $helper.getRemoteName($intf, "")_end_client_$n.name() (void* thisAsVoid, i_mailbox* ibox);
#set ($sb = "$helper.getPointerTypeName($n.type()) $helper.getRemoteName($intf, '')_client_$n.name()(void* thisAsVoid")
#foreach( $p in $n.iterator() )
#set ( $sb = "$sb, $helper.getTypeName($p.type()) $p.name()")
#end
#set ($sb = "$sb)")
$sb;
#end
#end
#end
#end

##generate typedefs for the client signal methods
#set($whoType = "etch_who*")
#set($whoName = "sender")
#foreach( $n in $intf.iterator() )
#if ($n.isMessage() && $n.hasSignal() && $n.isMsgDirClient())
#set ($methodReturn = "$helper.getPointerTypeName( $n.type() )")
#set ($methodName = "$helper.getServiceName($intf)_ex_$n.name()")
#set ($methodParams = "void* thisx")
#foreach( $p in $n.iterator() )
#set ($methodParams = "$methodParams, $helper.getTypeName( $p.type() ) $p.name()")
#end
#set ($methodParams = "$methodParams, $whoType $whoName")
typedef $methodReturn (*$methodName)($methodParams);
#end
#end

/**
 * $helper.getRemoteName($intf, $suffix)
 */
typedef struct $helper.getRemoteName($intf, $suffix)
{
    etch_object object;  

    i_$helper.getBaseName($intf, $suffix)* client_base;     /* owned */
    $helper.getRemoteName($intf, "")* remote_base;     /* owned */
    etch_client_factory* client_factory; /* owned */
    default_value_factory* vf;   /* owned by base */
    int session_id;

    /* toward-client virtuals go here */
    
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden() && ($n.isMsgDirBoth() || $n.isMsgDirClient()))
    $helper.getServiceName( $intf )_$n.name() $n.name();
#end
#end
#end

#foreach( $n in $intf.iterator() )
#if ($n.isMessage() && $n.hasSignal() && $n.isMsgDirClient())
    $helper.getServiceName( $intf )_ex_$n.name() _$n.name();
#end
#end


#foreach( $x in $intf.iterator() )
#if( $x.isMixin() )
#set( $m = $x.getModule() )
#foreach( $z in $m.iterator() )
#foreach( $n in $z.messages( true ) )
#if (!$n.isHidden())
#if ($n.isMsgDir($mc) || $n.isMsgDirBoth())
    $helper.getServiceName($z).toLowerCase()_$n.name() $n.name();
#end
#end
#end
#end
#end
#end

#foreach( $s in $intf.signals( false ) )

	etch_hashtable* $s.getSignalName()_subscribers;
	int (*add_$s.getSignalName()_subscriber)(void* thisx, $whoType $whoName);
	int (*remove_$s.getSignalName()_subscriber)(void* thisx, $whoType $whoName);
#end


    /* private, generally. since unit tests invoke async begin and end,
     * we must expose them either as virtuals or as external references.
     */
     
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden()&& ($n.isMsgDirBoth() || $n.isMsgDirClient()))
#if (!$n.isOneway())
    $helper.getServiceName( $intf )_async_begin_$n.name() async_begin_$n.name();
#end
#end
#end
#end

#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden()&& ($n.isMsgDirBoth() || $n.isMsgDirClient()))
#if (!$n.isOneway())
    $helper.getServiceName( $intf )_async_end_$n.name() async_end_$n.name();
#end
#end
#end
#end
    
    
} $helper.getRemoteName($intf, $suffix);

/* constructor */
$helper.getRemoteName($intf, $suffix)* new_$helper.getServiceName($intf)_remote_client (void*, etch_session*, etch_value_factory*);

/* convenience methods to override client's session interface methods */
etch_stub* $helper.getRemoteName($intf, "")_${suffix}_get_stubbase ($helper.getRemoteName($intf, $suffix)*);
etch_session_notify $helper.getRemoteName($intf, "")_${suffix}_set_session_notify($helper.getRemoteName($intf, $suffix)*, etch_session_notify);
etch_session_control $helper.getRemoteName($intf, "")_${suffix}_set_session_control($helper.getRemoteName($intf, $suffix)*, etch_session_control);
etch_session_query $helper.getRemoteName($intf, "")_${suffix}_set_session_query($helper.getRemoteName($intf, $suffix)*, etch_session_query);

#ifdef __cplusplus
} //extern "C"
#endif

#endif /* $helper.getRemoteName($intf, $suffix).toUpperCase()_H */
