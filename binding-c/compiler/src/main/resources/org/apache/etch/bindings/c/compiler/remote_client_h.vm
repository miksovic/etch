##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##

// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / c 1.1.0-incubating (LOCAL-0)
//   Fri Aug 28 15:58:20 CEST 2009
// This file is automatically created and should not be edited!

/*
 * $helper.getRemoteFileNameH($intf, $suffix) 
 */

#ifndef $helper.getRemoteName($intf, $suffix).toUpperCase()_H
#define $helper.getRemoteName($intf, $suffix).toUpperCase()_H

\#include "$helper.getRemoteFileNameH($intf, "")"
\#include "$helper.getBaseFileNameH($intf, $suffix)"
\#include "etch_transport.h"

#ifdef __cplusplus
extern "C" {
#endif

extern unsigned short CLASSID_$helper.getRemoteName($intf, $suffix).toUpperCase();

/**
 * $helper.getRemoteName($intf, $suffix)
 */
typedef struct $helper.getRemoteName($intf, $suffix)
{
    etch_object object;  

    i_$helper.getBaseName($intf, $suffix)* client_base;     /* owned */
    $helper.getRemoteName($intf, "")* remote_base;     /* owned */
    etch_client_factory* client_factory; /* owned */
    default_value_factory* vf;   /* owned by base */
    int session_id;

    /* toward-client virtuals go here */
    
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden() && ($n.isMsgDirBoth() || $n.isMsgDirClient()))
    $helper.getServiceName( $intf )_$n.name() $n.name();
#end
#end
#end
/*
#foreach( $n in $intf.iterator() )
#if ($n.isStruct())
#if (!$n.isHidden())
    $n.efqname($helper)* $n.name().toString().toLowerCase();
#end
#end
#end
*/


    /* private, generally. since unit tests invoke async begin and end,
     * we must expose them either as virtuals or as external references.
     */
     
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden()&& ($n.isMsgDirBoth() || $n.isMsgDirClient()))
#if (!$n.isOneway())
    $helper.getServiceName( $intf )_async_begin_$n.name() async_begin_$n.name();
#end
#end
#end
#end

#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden()&& ($n.isMsgDirBoth() || $n.isMsgDirClient()))
#if (!$n.isOneway())
    $helper.getServiceName( $intf )_async_end_$n.name() async_end_$n.name();
#end
#end
#end
#end
    
    
} $helper.getRemoteName($intf, $suffix);

/* constructor */
$helper.getRemoteName($intf, $suffix)* new_$helper.getServiceName($intf)_remote_client (void*, etch_session*, etch_value_factory*);

#ifdef __cplusplus
} //extern "C"
#endif

#endif /* $helper.getRemoteName($intf, $suffix).toUpperCase()_H */
