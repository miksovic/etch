## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements. See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership. The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License. You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied. See the License for the
## specific language governing permissions and limitations
## under the License.
// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

#set($i = $intf.name()) 
package $helper.getPackageName($intf)

import "etch"

#if($helper.isServer($mc) || $helper.isBoth($mc))

type ${i}ServerFactory struct {
	session   etch.Session
	transport etch.Transport
}

func New${i}ServerFactory(transport etch.Transport) *${i}ServerFactory {
	val := &${i}ServerFactory{nil, transport}
	return val
}

func NewListener(addr string) etch.Transport{
	tl := etch.NewTcpListener(addr)
	dsl := etch.NewDefaultSessionListener(tl)
	tl.SetSession(dsl)
	sf := New${i}ServerFactory(dsl)
	dsl.SetSession(sf)
	return sf
}

func (dsf *${i}ServerFactory) NewServer(connection *etch.TcpConnection) {
	ptzr := etch.NewPacketizer(connection, 10*1024)
	connection.SetSession(ptzr)
	dvf := NewValueFactory${i}()
	msgzr := etch.NewMessagizer(dvf, ptzr)
	ptzr.SetSession(msgzr)
	mbm := etch.NewPlainMailboxManager(nil, msgzr)
	msgzr.SetSession(mbm)
	dsvc := etch.NewDefaultDeliveryService(mbm, nil)
	mbm.SetSession(dsvc)
	impl := new(Impl${i}Server)
	
	stub := etch.NewEtchStub(dsvc, impl)
	dsvc.SetSession(stub)

	impl.TheClient = NewRemoteHelloWorldClient(dsvc, dvf)
	SetStubHelpers_Stub${i}Server(dvf)

	dsvc.TransportControl(etch.START, 4000)
}


func (dsf *${i}ServerFactory) SessionQuery(obj interface{}) interface{} {
	return nil
}

func (dsf *${i}ServerFactory) SessionControl(ctrl interface{}, value interface{}) interface{} {
	return nil
}

func (dsf *${i}ServerFactory) SessionNotify(obj interface{}) {

}

func (dsf *${i}ServerFactory) GetSession() etch.Session {
	return nil
}

func (dsf *${i}ServerFactory) SetSession(sess etch.Session) {

}

func (dsf *${i}ServerFactory) TransportQuery(obj interface{}) interface{} {
	return nil
}

func (dsf *${i}ServerFactory) TransportControl(ctrl interface{}, value interface{}) {
	dsf.transport.TransportControl(ctrl, value)
}

func (dsf *${i}ServerFactory) TransportNotify(value interface{}) {

}
#end
#if($helper.isClient($mc) || $helper.isBoth($mc))

func NewRemoteServer(addr string) *Remote${i}Server{
	tcpClientConn := etch.NewTcpConnection(addr, false, nil, nil)
	cdsvc, vf := buildStack(tcpClientConn)   
	return NewRemote${i}Server(cdsvc, vf)
}

func buildStack(conn *etch.TcpConnection) (etch.DeliveryService, etch.ValueFactory) {
	ptzr := etch.NewPacketizer(conn, 10*1024)
	conn.SetSession(ptzr)
	dvf := NewValueFactory${i}()
	msgzr := etch.NewMessagizer(dvf, ptzr)
	ptzr.SetSession(msgzr)
	mbm := etch.NewPlainMailboxManager(nil, msgzr)
	msgzr.SetSession(mbm)
	dsvc := etch.NewDefaultDeliveryService(mbm, nil)
	mbm.SetSession(dsvc)
	stub := etch.NewEtchStub(dsvc, new(Impl${i}Client))
	dsvc.SetSession(stub)

	SetStubHelpers_Stub${i}Client(dvf)
	return dsvc, dvf
}
#end