## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements. See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership. The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License. You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied. See the License for the
## specific language governing permissions and limitations
## under the License.
// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

package $helper.getPackageName($intf)

import "etch"
import "reflect"

#set( $vf = "ValueFactory$intf.name()" )
type ${vf} struct 
{
	etch.ValueFactory
## ----------------------------- fields -----------------------------
#set( $x = $params.clear() )
## standard params from DefaultValueFactory
#set( $x = $params.add( "msg" ) )
#set( $x = $params.add( "result" ) )

#foreach( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExcept() || $n.isMessage())
#foreach( $param in $n.iterator() )
#if (!$params.contains($param.name().name()))
#set( $x = $params.add($param.name().name()) )
	$param.vname( $helper ) *etch.Field
#end
#end
#end
#end
}


type dummyVal struct{}

func (dv *dummyVal) Validate(value interface{}) bool {
	return true
}
func (dv *dummyVal) ValidateValue(value interface{}) interface{} {
	return value
}

#foreach ( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
func NewArray${n.vname( $helper )} (length int32) interface{} {
	return make([]*$helper.capitalize($n.name().toString()), length)
}
#end
#end

func New${vf}() *$vf {

#set ($initList = " ")
#set ($sep = " ")
#set( $x = $params.clear() )
## standard params from DefaultValueFactory
#set( $x = $params.add( "msg" ) )
#set( $x = $params.add( "result" ) )
#foreach( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExcept() || $n.isMessage())
#foreach( $param in $n.iterator() )
#if (!$params.contains($param.name().name()))
#set( $x = $params.add($param.name().name()) )
#set ($initList = $initList + $sep + "nil")
#set ($sep = ",")
#end
#end
#end
#end

	ret := &${vf}{etch.NewDefaultValueFactory(), $initList}
#foreach ( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExtern() || $n.isExcept() || $n.isMessage())
	${n.vname( $helper )}  := etch.NewTypeByName("$n.fqname()")
	ret.AddType(${n.vname( $helper )})
#end
#end

#foreach ( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
	${n.vname( $helper )}.NewArray = NewArray${n.vname( $helper )}
#end
#end

#foreach ( $n in $intf.iterator() )
#set( $x = $params.clear() )
#set( $x = $params.add( "msg" ) )
#set( $x = $params.add( "result" ) )
#if ($n.isEnumx() || $n.isStruct() || $n.isExcept() || $n.isMessage())
#foreach( $param in $n.iterator() )
#if (!$params.contains($param.name().name()))
#set( $x = $params.add($param.name().name()) )
	ret.$param.vname( $helper ) = etch.NewField("$param.name().name()")
	ret.AddField(ret.$param.vname( $helper ))
#end
#end
#end
#end

#foreach ( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden())
#if ($n.isQueuedAsyncReceiver())
		${n.vname( $helper )}.AsyncMode = etch.QUEUED;
#elseif ($n.isFreeAsyncReceiver())
		${n.vname( $helper )}.AsyncMode = etch.FREE ;
#else
		${n.vname( $helper )}.AsyncMode = etch.MODE_NONE ;
#end
#end
#end
#end


#foreach ( $n in $intf.iterator() )
#if ($n.isMessage())
#if (!$n.isHidden())
#if (!$n.isOneway())
#set( $r = $n.getResultMessage() )
	${r.vname( $helper )}.ResponseField = ret.GetDefaultResponseField() ;
        ${n.vname( $helper )}.RType = $r.vname( $helper )
#end
#end
#end
	// params for $n.name()
#if ($n.isStruct() || $n.isExcept())
#foreach( $param in $n.getAllParameters() )
  	${n.vname( $helper )}.PutValidator(ret.$param.vname( $helper), new(dummyVal))
#end
#else
#foreach( $param in $n.iterator() )
#if ($param.vname( $helper).toString().startsWith("_mf_result") != true)
  	${n.vname( $helper )}.PutValidator(ret.$param.vname( $helper), new(dummyVal))
#end
#end
#end
#if ($n.isMessage())
	${n.vname( $helper )}.PutValidator(ret.GetDefaultMessageIdField(), new(dummyVal))
#if ($n.isHidden())
	${n.vname( $helper )}.PutValidator(ret.GetDefaultInReplyToField(), new(dummyVal))
	${n.vname( $helper )}.PutValidator(ret.GetDefaultResponseField(), new(dummyVal))
#end
#end
#end

#foreach ( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
#set( $tname = $n.efqname( $helper ) )
      	(*ret.GetClass2type())[reflect.Typeof(new($helper.capitalize($n.name().toString())))] = ${n.vname( $helper )}
	${n.vname( $helper )}.Helper = new(${n.vname( $helper )}ImportExportHelper)
#end
#end

	return ret
}


#foreach ( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
#set( $tname = $n.efqname( $helper ) )
type ${n.vname( $helper )}ImportExportHelper struct {
}

func (h *${n.vname( $helper )}ImportExportHelper) ExportValue(ty *etch.Type, vf etch.ValueFactory, value interface{}) *etch.StructValue {
     sv := etch.NewStructValue( vf.GetTypeByName("$n.fqname()"), vf, 0 )
     v := value.(*$helper.capitalize(${n.name().toString()}))
#foreach( $p in $n.getAllParameters() )
     sv.Put( vf.GetFieldByName("$p.name().toString()"), v.$helper.capitalize($p.name().toString()) )
#end
     return sv;
}

func (h *${n.vname( $helper )}ImportExportHelper) ImportValue(str *etch.StructValue) interface{} {
     v := new($helper.capitalize(${n.name().toString()}))
#foreach ($p in $n.getAllParameters())
#if ($helper.getTypeName( $p.type() ).startsWith("int"))
     v.$helper.capitalize($p.name().toString()) = etch.To$helper.getTypeName( $p.type() )(str.Fields[str.Vf.GetFieldByName("$p.name().toString()")])
#else
     v.$helper.capitalize($p.name().toString()) = str.Fields[str.Vf.GetFieldByName("$p.name().toString()")].($helper.getTypeName( $p.type() ))
#end
#end
     return v
}

#end
#end
