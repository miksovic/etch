## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements. See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership. The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License. You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied. See the License for the
## specific language governing permissions and limitations
## under the License.
// This file automatically generated by:
//   $version
//   $now
// This file is automatically created for your convenience and will not be
// overwritten once it exists! Please edit this file as necessary to implement
// your service logic.
package main

#set($i = $intf.name())
#set($intfname = "$i$suffix")
#set($baseclname = "Base$intfname")
#set($clname = "Impl$intfname")
#if ($helper.isServer($mc))
#set($peer = "client")
#set($peerclass = "Remote${i}Client")
#else
#set($peer = "server")
#set($peerclass = "Remote${i}Server")
#end

import "etch"
import "$helper.getPackageName($intf)"
import "fmt"
import "bufio"
import "os"

func main() {
#if ($helper.isServer($mc))
	listener := ${helper.getPackageName($intf)}.NewListener("127.0.0.1:4001")
	listener.TransportControl(etch.START_AND_WAIT_UP, 4000)
	fmt.Printf("Press a key to exit\n")
	reader := bufio.NewReader(os.Stdin)
        reader.ReadBytes('\n');
	listener.TransportControl(etch.STOP_AND_WAIT_DOWN, 4000)
#else
	remote := ${helper.getPackageName($intf)}.NewRemoteServer("127.0.0.1:4001")
	remote.TransportControl(etch.START_AND_WAIT_UP, 4000)

	//add your calls to the server here

	fmt.Printf("Press Enter to exit\n")
	reader := bufio.NewReader(os.Stdin)
        reader.ReadBytes('\n');
	remote.TransportControl(etch.STOP_AND_WAIT_DOWN, 4000)
#end
}
