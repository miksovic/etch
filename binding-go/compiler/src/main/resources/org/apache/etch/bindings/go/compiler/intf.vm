## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements. See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership. The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License. You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied. See the License for the
## specific language governing permissions and limitations
## under the License.
// This file automatically generated by:
//   $version
//   $now
// This file is automatically created and should not be edited!

package $helper.getPackageName($intf)

#if ($hasBaseClass)
type $intf.name()$suffix interface {
 $intf.name()
#else
type  $intf.name()$suffix interface {
#end
#foreach( $n in $intf.iterator() )
#if ($n.isMixin())
 $n.fqname()$suffix
#end
#end 
#if (!$intf.hasMessageDirection($mc))
	// no $mc direction items defined.
#end
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if ($n.isMsgDir($mc))
#if (!$n.isHidden())
#set ($methodName = "$n.name() (")
#set( $sep = "" )
#foreach( $p in $n.iterator() )
#set ($methodName = $methodName + "$sep $p.name() $helper.getTypeName( $p.type() )")
#set( $sep = ", " )
#end
#set ($methodName = $methodName + " ) $helper.getTypeName( $n.type() )")
 $methodName
#end
#end
#elseif ($n.isConstant())
//constants not yet supported
#elseif ($n.isEnumx())
//enums not yet supported
#elseif ($n.isExtern())
## ignore extern
#elseif ($n.isMixin())
## ignore mixin
#elseif ($n.isBuiltin())
## nothing to do.
#end
#end
}

#foreach( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
#if (!$hasBaseClass)
type $helper.capitalize($n.name().toString()) struct {
#if( $n.hasExtends() )
 $n.getExtends().name()
#end
#foreach( $i in $n.iterator() )
  $helper.capitalize($i.name().toString()) $helper.getTypeName( $i.type() ) 
#end
}
#end
#end
#end